name: CI

on:
  push:
    branches:
      - main
    tags: ['*']
    paths-ignore:
      - "**.md"
      - "*"
      - "!Project.toml"
      - "!Manifest.toml"
      - "!flake.nix"
      - "!flake.lock"
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    paths-ignore:
      - "**.md"
      - "*"
      - "!Project.toml"
      - "!Manifest.toml"
      - "!flake.nix"
      - "!flake.lock"

  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false
      run_build_images:
        description: "Run build-images job"
        required: false
        type: boolean
        default: false
      run_execute_workflow:
        description: "Run execute-workflow job"
        required: false
        type: boolean
        default: false
      workflow_execution_mode:
        description: "Workflow execution mode"
        required: false
        type: string
        default: "prod"

defaults:
  run:
    shell: bash

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  set-variables:
    runs-on: ubuntu-latest
    outputs:
      debug: ${{ steps.set-variables.outputs.debug }}
      skip_ci: ${{ steps.set-variables.outputs.skip_ci }}
      skip_tests: ${{ steps.set-variables.outputs.skip_tests }}
      mode: ${{ steps.set-variables.outputs.mode }}
      checkout_ref: ${{ steps.set-variables.outputs.checkout_ref }}

    steps:
      - name: Set action variables
        id: set-variables
        run: |
          DEBUG="false"
          MODE="prod"
          SKIP_CI="false"
          SKIP_TESTS="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEBUG="${{ inputs.debug_enabled }}"
            MODE="${{ inputs.workflow_execution_mode }}"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if ${{ contains(github.event.pull_request.labels.*.name, 'skip-ci') }}; then
              SKIP_CI="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'skip-tests') }}; then
              SKIP_TESTS="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'actions-debug') }}; then
              DEBUG="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'dev-mode') }}; then
              MODE="dev"
            fi
            CHECKOUT_REF="${{ github.event.pull_request.head.ref }}"
          else
            CHECKOUT_REF="${{ github.ref }}"
          fi

          echo "DEBUG=$DEBUG"
          echo "MODE=$MODE"
          echo "SKIP_CI=$SKIP_CI"
          echo "SKIP_TESTS=$SKIP_TESTS"

          echo "DEBUG=$DEBUG" >> $GITHUB_OUTPUT
          echo "MODE=$MODE" >> $GITHUB_OUTPUT
          echo "SKIP_CI=$SKIP_CI" >> $GITHUB_OUTPUT
          echo "SKIP_TESTS=$SKIP_TESTS" >> $GITHUB_OUTPUT
          echo "CHECKOUT_REF=$CHECKOUT_REF" >> $GITHUB_OUTPUT

  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          # - 'nightly'
        os:
          - ubuntu-latest
        arch:
          - x64
          # - x86
    steps:
      - uses: actions/checkout@v2
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install graphviz
          # python -m pip install --upgrade pip
          # pip install matplotlib
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
      - name: "Setup tmate debug session"
        uses: mxschmitt/action-tmate@a283f9441d2d96eb62436dc46d7014f5d357ac22 # ratchet:mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' }}
    permissions:
      actions: write
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v2
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install graphviz
          # python -m pip install --upgrade pip
          # pip install matplotlib
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - uses: julia-actions/cache@v1
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup tmate debug session"
        uses: mxschmitt/action-tmate@a283f9441d2d96eb62436dc46d7014f5d357ac22 # ratchet:mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using fluxome
          DocMeta.setdocmeta!(fluxome, :DocTestSetup, :(using fluxome); recursive=true)
          doctest(fluxome)
